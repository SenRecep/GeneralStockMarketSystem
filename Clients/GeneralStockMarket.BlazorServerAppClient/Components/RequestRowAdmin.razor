@inject NavigationManager NavigationManager
<li>
    <a data-toggle="collapse" class="@VerifyClass" href="#accord-@Index" aria-expanded="false">
        <div class="outer-div row p-2 ">
            <div class="px-2 ">
                <p class="text-truncate">İstek Tipi: @TypeString</p>
                <p class="text-truncate">@Amount</p>
            </div>
            <div class="d-flex flex-row justify-content-end ">
                @if (Type == RequestType.NewType)
                {
                    <button @onclick="RedirectToEditPage"><i class="far fa-thumbs-up mr-2"></i></button>
                }
                else
                {
                    <button @onclick="() => OnClick.InvokeAsync((Type,Id,true))"><i class="far fa-thumbs-up mr-2"></i></button>
                }

                <button @onclick="() => OnClick.InvokeAsync((Type,Id,false))"><i class="far fa-thumbs-down"></i></button>
            </div>
        </div>
        <div id="accord-@Index" data-parent="#accordion" class="collapse in detail" aria-expanded="true">
            @if (Type == RequestType.Product)
            {
                <pre class="mb-0">İşlem tarihi:@Date.ToLongDateString()<br />İlgili ürün:@ProductName<br />@Description</pre>
            }
            else
            {
                <pre class="mb-0">İşlem tarihi:@Date.ToLongDateString()<br />@Description</pre>
            }
        </div>
    </a>
</li>

@code{

    [Parameter]
    public EventCallback<(RequestType Type, Guid Id, bool Mode)> OnClick { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public bool? Verify { get; set; }

    public string VerifyClass { get; set; }


    [Parameter]
    public RequestType Type { get; set; }

    public string TypeString { get; set; }


    [Parameter]
    public string Amount { get; set; }

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string ProductName { get; set; }

    protected void RedirectToEditPage()
    {
        NavigationManager.NavigateTo($"/admin/productcreate/{Id}");
    }


    protected override void OnInitialized()
    {
        TypeString = Type switch
        {
            RequestType.Deposit => "TL Yatırma",
            RequestType.Product => "Ürün Ekleme",
            RequestType.NewType => "Yeni Ürün Tipi",
            _ => "[ISTEK TIPI]"
        };

        Amount = Type switch
        {
            RequestType.NewType => $"Ürün Adı: {Amount}",
            _ => $"Miktar: {Amount}"
        };

        if (Verify.HasValue)
            VerifyClass = Verify.Value ? "approved" : "rejected";
    }
}