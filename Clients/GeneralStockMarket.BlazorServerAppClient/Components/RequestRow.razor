<li>
    <a data-toggle="collapse" class="@VerifyClass" href="#accord-@Index" aria-expanded="false">
        <div class="outer-div">
            <div class="px-2">
                <p class="text-truncate">İstek Tipi: @TypeString</p>
                <p class="text-truncate">
                    @Amount
                    @if (Type == RequestType.Deposit)
                    {
                        @(Enum.GetName<MoneyType>(MoneyType));
                    }
                </p>
                
            </div>
            <button  @onclick="() => OnClick.InvokeAsync((Type,Id))"><i class="far fa-trash-alt"></i></button>
        </div>
        <div id="accord-@Index" data-parent="#accordion" class="collapse in detail" aria-expanded="true">
            @if (Type==RequestType.Product)
            {
                <pre class="mb-0">İşlem tarihi:@Date.ToLongDateString()<br />İlgili ürün:@ProductName<br />@Description</pre>
            }
            else
            {
                <pre class="mb-0">İşlem tarihi:@Date.ToLongDateString()<br />@Description</pre>
            }
        </div>
    </a>
</li>

@code{

    [Parameter]
    public EventCallback<(RequestType Type, Guid Id)> OnClick { get; set; }

    [Parameter]
    public Guid Id { get; set; }


    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public bool? Verify { get; set; }

    public string VerifyClass { get; set; }

    [Parameter]
    public RequestType Type { get; set; }

    public string TypeString { get; set; }


    [Parameter]
    public string Amount { get; set; }

    [Parameter]
    public MoneyType MoneyType { get; set; }

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string ProductName { get; set; }

    protected override void OnInitialized()
    {
        TypeString = Type switch
        {
            RequestType.Deposit => "Para Yatırma",
            RequestType.Product => "Ürün Ekleme",
            RequestType.NewType => "Yeni Ürün Tipi",
            _=>"[ISTEK TIPI]"
        };

        Amount = Type switch
        {
            RequestType.NewType => $"Ürün Adı: {Amount}",
            _ => $"Miktar: {Amount}"
        };

        if (Verify.HasValue)
            VerifyClass = Verify.Value ? "approved" : "rejected";
    }
}