@page "/admin/request"
@inject IRequestService requestService
@attribute [Authorize(Roles = RoleInfo.DeveloperOrAdmin)]

<link href="/css/Client/dist/requestadmin.css" rel="stylesheet" />

<div class="page requestadmin-page">
    <PageHeader Title="Ä°stek Onay" />
    @if (IsLoading)
    {
        <Loading />
    }
    else
    {
        <div class="accordion" id="accordion">
            <ul>
                @foreach (var item in RequestDto.DepositRequestDtos)
                {
                    <RequestRowAdmin OnClick="ClickHandler" Index="@(IdCounter++)" Id="@item.Id" Verify="@item.Verify" Type="RequestType.Deposit" Description="@item.Description" Amount="@item.Amount.ToString()" MoneyType="@item.MoneyType" Date="@item.CreatedTime" />
                }
                @foreach (var item in RequestDto.ProductDepositRequestDtos)
                {
                    <RequestRowAdmin OnClick="ClickHandler" Index="@(IdCounter++)" Id="@item.Id" Verify="@item.Verify" Type="RequestType.Product" ProductName="@item.Product.Name" Description="@item.Description" Amount="@item.Amount.ToString()" Date="@item.CreatedTime" />
                }
                @foreach (var item in RequestDto.NewTypeRequestDtos)
                {
                    <RequestRowAdmin OnClick="ClickHandler" Index="@(IdCounter++)" Id="@item.Id" Verify="@item.Verify" Type="RequestType.NewType" Description="@item.Description" Amount="@item.Name" Date="@item.CreatedTime" />
                }
            </ul>
        </div>
    }
</div>



@code{
    public bool IsLoading { get; set; } = true;
    public RequestDto RequestDto { get; set; }

    public int IdCounter { get; set; } = 0;

    protected async Task ClickHandler((RequestType Type, Guid Id,bool Mode) data)
    {
        IsLoading = true;
        var response = await requestService.VerifyUpdateRequestAsync(data.Mode, data.Type, data.Id);
        await InitAsync();
    }

    protected async Task InitAsync()
    {
        var requestResponse = await requestService.GetAllRequestsAsync();
        if (requestResponse.IsSuccessful)
            RequestDto = requestResponse.Data;
        IsLoading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitAsync();
    }
}