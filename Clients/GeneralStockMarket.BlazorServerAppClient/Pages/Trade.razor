@page "/trade/{Id:guid}"
@attribute [Authorize(Roles = RoleInfo.IsVerified)]
@inject IProductService productService
@inject IWalletService walletService
@inject PhotoHelper photoHelper
@inject ITradeService tradeService

<link href="/css/Client/dist/trade.css" rel="stylesheet" />

<div class="page trade-page">
    <PageHeader Title="Alım/Satım" />
    @if (IsLoading)
    {
        <Loading />
    }
    else
    {
        <div class="section-one">
            <div class="row">
                <div class="col-sm-4 offset-sm-5 d-flex flex-row align-items-center">
                    <img class="img-fluid" src="@(photoHelper.GetProductImageUrl(ProductTradeDto.ImageName))"
                         alt="product-image" />
                    <p class=" pl-2">
                        @ProductTradeDto.Name
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-5 offset-sm-1">
                    <p>Sahip olunan adet: @(UserProductItemDto.IsNotNull()?UserProductItemDto.Amount:0)</p>
                    <p>Market Stoğu: @ProductTradeDto.Amount</p>
                </div>
                <div class="col-sm-5">
                    <p>Ortalama fiyat: @ProductTradeDto.AvgPrice.ToString("N2")₺</p>
                    <p>Bakiye: @WalletDto.Money₺</p>
                </div>
            </div>

        </div>
        <div class="section-one">

            <div class="row mb-3">
                <div class="col-sm-6 text-center btn-group offset-sm-3">
                    <button @onclick="()=>TradeTypeChange(TradeType.Buy)" class="btn btn-success btn-lg">Al</button>
                    <button @onclick="()=>TradeTypeChange(TradeType.Sell)" class="btn btn-danger btn-lg">Sat</button>
                </div>
            </div>
            <EditForm Model="TradeCreateDto" OnValidSubmit="ValidSubmit">
                <FluentValidationValidator></FluentValidationValidator>
                @if (!ErrorMessage.IsEmpty())
                {
                    <p class="text-danger mb-2">@ErrorMessage</p>
                }
                <div class="form-group row">
                    <label for="Amount" class="col-sm-1 col-form-label">Miktar</label>
                    <div class="col-sm-11">
                        <InputNumber @bind-Value="TradeCreateDto.Amount" class="form-control" id="Amount" placeholder="Miktar" />
                        <ValidationMessage For="() => TradeCreateDto.Amount"></ValidationMessage>
                    </div>
                </div>
                @if (TradeCreateDto.TradeType == TradeType.Sell)
                {
                    <div class="form-group row">
                        <label for="Price" class="col-sm-1 col-form-label">Fiyat</label>
                        <div class="col-sm-11">
                            <InputNumber @bind-Value="TradeCreateDto.UnitPrice" class="form-control" id="Price" placeholder="Fiyat" />
                            <ValidationMessage For="() => TradeCreateDto.UnitPrice"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group mb-0">
                        <input type="submit" class="form-control btn-danger" value="SAT">
                    </div>
                }

                @if (TradeCreateDto.TradeType == TradeType.Buy)
                {
                    <div class="form-group mb-0">
                        <input type="submit" class="form-control btn-success" value="AL">
                    </div>
                }

            </EditForm>

        </div>
        <div class="section-one p-0">
            <ul>
                @foreach (var item in ProductTradeDto.MarketItems)
                {
                    <li>
                        <a>
                            <div class="row">
                                <p class="col-sm-3">İşlem Adeti: @item.Amount</p>
                                <p class="col-sm-3">Toplam Fiyat: @(item.Amount*item.UnitPrice)₺</p>
                                <p class="col-sm-3">Birim Fiyat: @item.UnitPrice₺</p>
                                <p class="col-sm-3">İşlem Tarihi: @item.CreateTime.ToString()</p>
                            </div>
                        </a>
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code{
    [Parameter]
    public Guid Id { get; set; }

    public bool IsLoading { get; set; }

    public string ErrorMessage { get; set; } = string.Empty;

    public TradeCreateDto TradeCreateDto { get; set; } = new TradeCreateDto();

    public ProductTradeDto ProductTradeDto { get; set; } = null;

    public WalletDto WalletDto { get; set; }

    public ProductItemDto UserProductItemDto { get; set; }

    public void TradeTypeChange(TradeType mode)
    {
        TradeCreateDto.TradeType = mode;
    }

    public async Task ValidSubmit()
    {
        IsLoading = true;
        StateHasChanged();
        if (TradeCreateDto.TradeType == TradeType.Buy && TradeCreateDto.Amount > ProductTradeDto.Amount)
        {
            ErrorMessage = "Piyasada bu miktarda ürün bulunmamaktadır";
            IsLoading = false;
            StateHasChanged();
            return;
        }

        var response = await tradeService.TradeAsync(TradeCreateDto);
        if (response.IsSuccessful)
            await InitAsync();
        else
        {
            ErrorMessage = GeneralStockMarket.CoreLib.Response.Error.GetError(response.ErrorData);
            IsLoading = false;
            StateHasChanged();
        }

    }

    public async Task InitAsync()
    {
        IsLoading = true;
        StateHasChanged();
        var productResponse = productService.GetProductByIdAsync(Id);

        var walletResponse = walletService.GetWalletAsync();

        await productResponse;
        if (productResponse.Result.IsSuccessful)
            ProductTradeDto = productResponse.Result.Data;

        await walletResponse;
        if (walletResponse.Result.IsSuccessful)
        {
            WalletDto = walletResponse.Result.Data;
            UserProductItemDto = WalletDto.ProductItems.FirstOrDefault(x => x.ProductId == Id);
        }
        TradeCreateDto.ProductId = Id;
        IsLoading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitAsync();
    }

}